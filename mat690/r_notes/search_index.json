[["index.html", "Preface", " Preface This note is constructed based on the NetSciX workshop 2016 notes by Katya. "],["basic-functions-in-r.html", "1 Basic Functions in R 1.1 Basic operations 1.2 Value comparisons 1.3 Special constants 1.4 Vectors 1.5 Factors 1.6 Matrices &amp; Arrays 1.7 Lists 1.8 Data Frames 1.9 Flow Control 1.10 R plots and colors 1.11 R troubleshooting 1.12 Homework 1 - part 1", " 1 Basic Functions in R 1.1 Basic operations You can assign a value to an object using assign(), &lt;-, or =. x &lt;- 3 # Assignment x # Evaluate the expression and print result ## [1] 3 y &lt;- 4 # Assignment y + 5 # Evaluation, y remains 4 ## [1] 9 z &lt;- x + 17*y # Assignment z # Evaluation ## [1] 71 1.2 Value comparisons Comparisons return boolean values: TRUE or FALSE (often abbreviated to T and F) rm(z) # Remove z: deletes the object. 2==2 # Equality ## [1] TRUE 2!=2 # Inequality ## [1] FALSE x &lt;= y # less than or equal: &quot;&lt;&quot;, &quot;&gt;&quot;, and &quot;&gt;=&quot; also work ## [1] TRUE 1.3 Special constants NA, NULL, Inf, -Inf, NaN NA - missing or undefined data 5 + NA # When used in an expression, the result is generally NA ## [1] NA is.na(5+NA) # Check if missing ## [1] TRUE NULL - an empty object, e.g. a null/empty list 10 + NULL # use returns an empty object (length zero) ## numeric(0) is.null(NULL) # check if NULL ## [1] TRUE Inf and -Inf represent positive and negative infinity They can be returned by mathematical operations like division of a number by zero: 5/0 ## [1] Inf Check if a number is finite is.finite(5/0) ## [1] FALSE NaN (Not a Number) - the result of an operation that cannot be reasonably defined 0/0 ## [1] NaN is.nan(0/0) ## [1] TRUE 1.4 Vectors v1 &lt;- c(1, 5, 11, 33) # Numeric vector, length 4 v2 &lt;- c(&quot;hello&quot;,&quot;world&quot;) # Character vector, length 2 (a vector of strings) v3 &lt;- c(TRUE, TRUE, FALSE) # Logical vector, same as c(T, T, F) Combining different types of elements in one vector will coerce the elements to the least restrictive type: v4 &lt;- c(v1,v2,v3,&quot;boo&quot;) # All elements turn into strings Other ways to create vectors: v &lt;- 1:7 # same as c(1,2,3,4,5,6,7) v &lt;- rep(0, 77) # repeat zero 77 times: v is a vector of 77 zeroes v &lt;- rep(1:3, times=2) # Repeat 1,2,3 twice v &lt;- rep(1:10, each=2) # Repeat each element twice v &lt;- seq(10,20,2) # sequence: numbers between 10 and 20, in jumps of 2 length(v) # check the length of the vector ## [1] 6 v1 &lt;- 1:5 # 1,2,3,4,5 v2 &lt;- rep(1,5) # 1,1,1,1,1 Element-wise operations: v1 + v2 # Element-wise addition ## [1] 2 3 4 5 6 Add 1 to each element v1 + 1 ## [1] 2 3 4 5 6 Multiply each element by 2 v1 * 2 ## [1] 2 4 6 8 10 This doesnt work: (1,7) is a vector of different length v1 + c(1,7) ## Warning in v1 + c(1, 7): longer object length is not a multiple of shorter object length ## [1] 2 9 4 11 6 Mathematical operations. The sum of all elements. sum(v1) ## [1] 15 The average of all elements mean(v1) ## [1] 3 The standard deviation sd(v1) ## [1] 1.581139 Correlation between v1 and v1*5 cor(v1,v1*5) ## [1] 1 Logical operations: v1 &gt; 2 # Each element is compared to 2, returns logical vector ## [1] FALSE FALSE TRUE TRUE TRUE v1==v2 # Are corresponding elements equivalent, returns logical vector. ## [1] TRUE FALSE FALSE FALSE FALSE v1!=v2 # Are corresponding elements *not* equivalent? Same as !(v1==v2) ## [1] FALSE TRUE TRUE TRUE TRUE (v1&gt;2) | (v2&gt;0) # | is the boolean OR, returns a vector. ## [1] TRUE TRUE TRUE TRUE TRUE (v1&gt;2) &amp; (v2&gt;0) # &amp; is the boolean AND, returns a vector. ## [1] FALSE FALSE TRUE TRUE TRUE (v1&gt;2) || (v2&gt;0) # || is the boolean OR, returns a single value ## [1] TRUE (v1&gt;2) &amp;&amp; (v2&gt;0) # &amp;&amp; is the boolean AND, ditto ## [1] FALSE Vector elements v1[3] # third element of v1 ## [1] 3 v1[2:4] # elements 2, 3, 4 of v1 ## [1] 2 3 4 v1[c(1,3)] # elements 1 and 3 - note that your indexes are a vector ## [1] 1 3 v1[c(T,T,F,F,F)] # elements 1 and 2 - only the ones that are TRUE ## [1] 1 2 v1[v1&gt;3] # v1&gt;3 is a logical vector TRUE for elements &gt;3 ## [1] 4 5 NOTE: If you are used to languages indexing from 0, R will surprise you by indexing from 1. To add more elements to a vector, simply assign them values. v1[6:10] &lt;- 6:10 We can also directly assign the vector a length: length(v1) &lt;- 15 # the last 5 elements are added as missing data: NA 1.5 Factors Factors are used to store categorical data. eye.col.v &lt;- c(&quot;brown&quot;, &quot;green&quot;, &quot;brown&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;) #vector eye.col.f &lt;- factor(c(&quot;brown&quot;, &quot;green&quot;, &quot;brown&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;blue&quot;)) #factor eye.col.v ## [1] &quot;brown&quot; &quot;green&quot; &quot;brown&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; eye.col.f ## [1] brown green brown blue blue blue ## Levels: blue brown green R will identify the different levels of the factor - e.g. all distinct values. The data is stored internally as integers - each number corresponding to a factor level. levels(eye.col.f) # The levels (distinct values) of the factor (categorical variable) ## [1] &quot;blue&quot; &quot;brown&quot; &quot;green&quot; as.numeric(eye.col.f) # The factor as numeric values: 1 is blue, 2 is brown, 3 is green ## [1] 2 3 2 1 1 1 as.numeric(eye.col.v) # The character vector, however, can not be coerced to numeric ## Warning: NAs introduced by coercion ## [1] NA NA NA NA NA NA However, you can convert it to vector then coerce to numeric. as.numeric(as.factor(eye.col.v)) ## [1] 2 3 2 1 1 1 1.6 Matrices &amp; Arrays A matrix is a vector with dimensions: m &lt;- rep(1, 20) # A vector of 20 elements, all 1 dim(m) &lt;- c(5,4) # Dimensions set to 5 &amp; 4, so m is now a 5x4 matrix Create a matrix using matrix(): m &lt;- matrix(1, nrow=5, ncol=4) # same matrix as above, 5x4, full of 1s m &lt;- matrix(1,5,4) # same matrix as above dim(m) # What are the dimensions of m? ## [1] 5 4 Create a matrix by combining vectors: m &lt;- cbind(1:5, 5:1, 5:9) # Bind 3 vectors as columns, 5x3 matrix m &lt;- rbind(1:5, 5:1, 5:9) # Bind 3 vectors as rows, 3x5 matrix m &lt;- matrix(1:10,10,10) Select matrix elements: m[2,3] # Matrix m, row 2, column 3 - a single cell ## [1] 2 m[2,] # The whole second row of m as a vector ## [1] 2 2 2 2 2 2 2 2 2 2 m[,2] # The whole second column of m as a vector ## [1] 1 2 3 4 5 6 7 8 9 10 m[1:2,4:6] # submatrix: rows 1 and 2, columns 4, 5 and 6 ## [,1] [,2] [,3] ## [1,] 1 1 1 ## [2,] 2 2 2 m[-1,] # all rows *except* the first one ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 2 2 2 2 2 2 2 2 2 2 ## [2,] 3 3 3 3 3 3 3 3 3 3 ## [3,] 4 4 4 4 4 4 4 4 4 4 ## [4,] 5 5 5 5 5 5 5 5 5 5 ## [5,] 6 6 6 6 6 6 6 6 6 6 ## [6,] 7 7 7 7 7 7 7 7 7 7 ## [7,] 8 8 8 8 8 8 8 8 8 8 ## [8,] 9 9 9 9 9 9 9 9 9 9 ## [9,] 10 10 10 10 10 10 10 10 10 10 m[1,]==m[,1] # Are elements in row 1 equivalent to corresponding elements from column 1? ## [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE If the matrix is too large, it is impossible to check it one by one, you can do the following to see if all the booleans are TURE. unique(m[1,]==m[,1]) # Are elements in row 1 equivalent to corresponding elements from column 1? ## [1] TRUE FALSE m&gt;3 # A logical matrix: TRUE for m elements &gt;3, FALSE otherwisem[m&gt;3] # Selects only TRUE elements - that is ones greater than 3 ## [1] 4 5 6 7 8 9 10 4 5 6 7 8 9 10 4 5 6 7 8 9 10 4 5 6 7 8 9 10 4 5 6 7 8 9 10 4 5 6 7 8 9 10 4 5 6 7 8 9 ## [49] 10 4 5 6 7 8 9 10 4 5 6 7 8 9 10 4 5 6 7 8 9 10 t(m) # Transpose m ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 2 3 4 5 6 7 8 9 10 ## [2,] 1 2 3 4 5 6 7 8 9 10 ## [3,] 1 2 3 4 5 6 7 8 9 10 ## [4,] 1 2 3 4 5 6 7 8 9 10 ## [5,] 1 2 3 4 5 6 7 8 9 10 ## [6,] 1 2 3 4 5 6 7 8 9 10 ## [7,] 1 2 3 4 5 6 7 8 9 10 ## [8,] 1 2 3 4 5 6 7 8 9 10 ## [9,] 1 2 3 4 5 6 7 8 9 10 ## [10,] 1 2 3 4 5 6 7 8 9 10 Careful with the matrix multiplication grammar in R! m &lt;- t(m) # Assign m the transposed m m %*% t(m) # %*% does matrix multiplication ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 385 385 385 385 385 385 385 385 385 385 ## [2,] 385 385 385 385 385 385 385 385 385 385 ## [3,] 385 385 385 385 385 385 385 385 385 385 ## [4,] 385 385 385 385 385 385 385 385 385 385 ## [5,] 385 385 385 385 385 385 385 385 385 385 ## [6,] 385 385 385 385 385 385 385 385 385 385 ## [7,] 385 385 385 385 385 385 385 385 385 385 ## [8,] 385 385 385 385 385 385 385 385 385 385 ## [9,] 385 385 385 385 385 385 385 385 385 385 ## [10,] 385 385 385 385 385 385 385 385 385 385 m * m # * does element-wise multiplication ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 4 9 16 25 36 49 64 81 100 ## [2,] 1 4 9 16 25 36 49 64 81 100 ## [3,] 1 4 9 16 25 36 49 64 81 100 ## [4,] 1 4 9 16 25 36 49 64 81 100 ## [5,] 1 4 9 16 25 36 49 64 81 100 ## [6,] 1 4 9 16 25 36 49 64 81 100 ## [7,] 1 4 9 16 25 36 49 64 81 100 ## [8,] 1 4 9 16 25 36 49 64 81 100 ## [9,] 1 4 9 16 25 36 49 64 81 100 ## [10,] 1 4 9 16 25 36 49 64 81 100 Arrays: more than 2 dimensions Created with the array() function: a &lt;- array(data=1:18,dim=c(3,3,2)) # 3d with dimensions 3x3x2 a &lt;- array(1:18,c(3,3,2)) # the same array 1.7 Lists Lists are collections of objects (e.g. of strings, vectors, matrices, other lists, etc.) l1 &lt;- list(boo=v1,foo=v2,moo=v3,zoo=&quot;Animals!&quot;) # A list with four components l2 &lt;- list(v1,v2,v3,&quot;Animals!&quot;) l3 &lt;- list() l4 &lt;- NULL l1[&quot;boo&quot;] # Access boo: this returns a list. ## $boo ## [1] 1 2 3 4 5 6 7 8 9 10 NA NA NA NA NA l1[[&quot;boo&quot;]] # Access boo: this returns the numeric vector ## [1] 1 2 3 4 5 6 7 8 9 10 NA NA NA NA NA l1[[1]] # Returns the first component of the list, equivalent to above. ## [1] 1 2 3 4 5 6 7 8 9 10 NA NA NA NA NA l1$boo # Named elements can be accessed using the $ operator - equivalent to [[]] ## [1] 1 2 3 4 5 6 7 8 9 10 NA NA NA NA NA Add more elements to a list: l3[[1]] &lt;- 11 # add an element to the empty list l3 l4[[3]] &lt;- c(22, 23) # add a vector as element 3 in the empty list l4. # Since we added element 3, elements 1 &amp; 2 will be generated and empty (NULL) l1[[5]] &lt;- &quot;More elements!&quot; # The list l1 had 4 elements, we&#39;re adding a 5th here. l1[[8]] &lt;- 1:11 # We added an 8th element, but not 6th or 7th. Those will be created empty (NULL) l1$Something &lt;- &quot;A thing&quot; # Adds a ninth element - &quot;A thing&quot;, named &quot;Something&quot; 1.8 Data Frames The data frame is a special kind of list used for storing dataset tables. Think of rows as cases, columns as variables. Each column is a vector or factor. Creating a dataframe: dfr1 &lt;- data.frame( ID=1:4, FirstName=c(&quot;John&quot;,&quot;Jim&quot;,&quot;Jane&quot;,&quot;Jill&quot;), Female=c(F,F,T,T), Age=c(22,33,44,55) ) dfr1$FirstName # Access the second column of dfr1. ## [1] &quot;John&quot; &quot;Jim&quot; &quot;Jane&quot; &quot;Jill&quot; Notice that R thinks this is a categorical variable and so its treating it like a factor, not a character vector. Lets get rid of the factor by telling R to treat FirstName as a vector: dfr1$FirstName &lt;- as.vector(dfr1$FirstName) Alternatively, you can tell R you dont like factors from the start using stringsAsFactors=FALSE dfr2 &lt;- data.frame(FirstName=c(&quot;John&quot;,&quot;Jim&quot;,&quot;Jane&quot;,&quot;Jill&quot;), stringsAsFactors=FALSE) dfr2$FirstName # Success: not a factor. ## [1] &quot;John&quot; &quot;Jim&quot; &quot;Jane&quot; &quot;Jill&quot; Access elements of the data frame dfr1[1,] # First row, all columns ## ID FirstName Female Age ## 1 1 John FALSE 22 dfr1[,1] # First column, all rows ## [1] 1 2 3 4 dfr1$Age # Age column, all rows ## [1] 22 33 44 55 dfr1[1:2,3:4] # Rows 1 and 2, columns 3 and 4 - the gender and age of John &amp; Jim ## Female Age ## 1 FALSE 22 ## 2 FALSE 33 dfr1[c(1,3),] # Rows 1 and 3, all columns ## ID FirstName Female Age ## 1 1 John FALSE 22 ## 3 3 Jane TRUE 44 Find the names of everyone over the age of 30 in the data dfr1[dfr1$Age&gt;30,2] ## [1] &quot;Jim&quot; &quot;Jane&quot; &quot;Jill&quot; Find the average age of all females in the data: mean ( dfr1[dfr1$Female==TRUE,4] ) ## [1] 49.5 1.9 Flow Control if (condition) expr1 else expr2 x &lt;- 5 y &lt;- 10 if (x==0) { #if x equals 0, then let y be 0 y &lt;- 0 } else { y &lt;- y/x #otherwise, let y be y/x } y ## [1] 2 for (variable in sequence) expr ASum &lt;- 0; AProd &lt;- 1 for (i in 1:x) { ASum &lt;- ASum + i #cumulative sum AProd &lt;- AProd * i #cumulative product } ASum # equivalent to sum(1:x) ## [1] 15 AProd # equivalemt to prod(1:x) ## [1] 120 while (condintion) expr while (x &gt; 0) { print(x) #display x x &lt;- x-1 #decrease the value of x by 1 } ## [1] 5 ## [1] 4 ## [1] 3 ## [1] 2 ## [1] 1 Let a=c(1, 1, 1, 2, 1, 4, 6, 8, 9, 7, 3, 10, 3, 10). Split the vector a into two vectors b and c with equal sum. a=c(1, 1, 1, 2, 1, 4, 6, 8, 9, 7, 3, 10, 3, 10) for (i in 1:length(a)){ if (sum(a[1:i])==sum(a[(i+1):length(a)])){ #check if the sum of the first i elements equals the sum of the rest b=a[1:i] #if yes, then define b and c c=a[(i+1):length(a)] break #once you found it, you are done, no need to check more } } b #print b and c ## [1] 1 1 1 2 1 4 6 8 9 c ## [1] 7 3 10 3 10 Determine the set of integers between 2 to n such that the integer is the square of some other smaller numbers. \\(n=200\\). This problem can be down in many different ways, and I did it the way to show the usage of double loop together with if statement. n=200 sq_set=c() for (i in 2:n){ for (j in 2:sqrt(n)){ if (i==(j^2)){ #check if i equals the squre of j sq_set=c(sq_set,i) #if yes, then add i into the set } } } sq_set #print sq_set ## [1] 4 9 16 25 36 49 64 81 100 121 144 169 196 1.10 R plots and colors In most R functions, you can use named colors, hex, or rgb values: (In the simple base plot chart below x and y are point coordiantes, pch is the point symbol shape, cex is the point size, and col is the color. to see the parameters for ploting in base R, check out ?par plot(x=1:10, y=rep(5,10), pch=19, cex=5, col=&quot;dark red&quot;) points(x=1:10, y=rep(6, 10), pch=19, cex=5, col=&quot;#557799&quot;) points(x=1:10, y=rep(4, 10), pch=19, cex=5, col=rgb(.25, .5, .3)) You may notice that rgb here ranges from 0 to 1. While this is the R default, you can also set it for the 0-255 range: rgb(10, 100, 100, maxColorValue=255) ## [1] &quot;#0A6464&quot; We can also set the opacity/transparency using the parameter alpha (range 0-1): plot(x=1:5, y=rep(5,5), pch=19, cex=16, col=rgb(.25, .5, .3, alpha=.5), xlim=c(0,6)) If we have a hex color representation, we can set the transparency alpha using adjustcolor from package grDevices. For fun, lets also set the the plot background to gray using the par() function for graphical parameters. par(bg=&quot;black&quot;) col.tr &lt;- grDevices::adjustcolor(&quot;#557799&quot;, alpha=0.7) plot(x=1:5, y=rep(5,5), pch=19, cex=20, col=col.tr, xlim=c(0,6)) If you plan on using the built-in color names, heres what they are: par(bg=&quot;white&quot;) colors() ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; ## [7] &quot;antiquewhite4&quot; &quot;aquamarine&quot; &quot;aquamarine1&quot; &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; &quot;azure3&quot; &quot;azure4&quot; &quot;beige&quot; ## [19] &quot;bisque&quot; &quot;bisque1&quot; &quot;bisque2&quot; &quot;bisque3&quot; &quot;bisque4&quot; &quot;black&quot; ## [25] &quot;blanchedalmond&quot; &quot;blue&quot; &quot;blue1&quot; &quot;blue2&quot; &quot;blue3&quot; &quot;blue4&quot; ## [31] &quot;blueviolet&quot; &quot;brown&quot; &quot;brown1&quot; &quot;brown2&quot; &quot;brown3&quot; &quot;brown4&quot; ## [37] &quot;burlywood&quot; &quot;burlywood1&quot; &quot;burlywood2&quot; &quot;burlywood3&quot; &quot;burlywood4&quot; &quot;cadetblue&quot; ## [43] &quot;cadetblue1&quot; &quot;cadetblue2&quot; &quot;cadetblue3&quot; &quot;cadetblue4&quot; &quot;chartreuse&quot; &quot;chartreuse1&quot; ## [49] &quot;chartreuse2&quot; &quot;chartreuse3&quot; &quot;chartreuse4&quot; &quot;chocolate&quot; &quot;chocolate1&quot; &quot;chocolate2&quot; ## [55] &quot;chocolate3&quot; &quot;chocolate4&quot; &quot;coral&quot; &quot;coral1&quot; &quot;coral2&quot; &quot;coral3&quot; ## [61] &quot;coral4&quot; &quot;cornflowerblue&quot; &quot;cornsilk&quot; &quot;cornsilk1&quot; &quot;cornsilk2&quot; &quot;cornsilk3&quot; ## [67] &quot;cornsilk4&quot; &quot;cyan&quot; &quot;cyan1&quot; &quot;cyan2&quot; &quot;cyan3&quot; &quot;cyan4&quot; ## [73] &quot;darkblue&quot; &quot;darkcyan&quot; &quot;darkgoldenrod&quot; &quot;darkgoldenrod1&quot; &quot;darkgoldenrod2&quot; &quot;darkgoldenrod3&quot; ## [79] &quot;darkgoldenrod4&quot; &quot;darkgray&quot; &quot;darkgreen&quot; &quot;darkgrey&quot; &quot;darkkhaki&quot; &quot;darkmagenta&quot; ## [85] &quot;darkolivegreen&quot; &quot;darkolivegreen1&quot; &quot;darkolivegreen2&quot; &quot;darkolivegreen3&quot; &quot;darkolivegreen4&quot; &quot;darkorange&quot; ## [91] &quot;darkorange1&quot; &quot;darkorange2&quot; &quot;darkorange3&quot; &quot;darkorange4&quot; &quot;darkorchid&quot; &quot;darkorchid1&quot; ## [97] &quot;darkorchid2&quot; &quot;darkorchid3&quot; &quot;darkorchid4&quot; &quot;darkred&quot; &quot;darksalmon&quot; &quot;darkseagreen&quot; ## [103] &quot;darkseagreen1&quot; &quot;darkseagreen2&quot; &quot;darkseagreen3&quot; &quot;darkseagreen4&quot; &quot;darkslateblue&quot; &quot;darkslategray&quot; ## [109] &quot;darkslategray1&quot; &quot;darkslategray2&quot; &quot;darkslategray3&quot; &quot;darkslategray4&quot; &quot;darkslategrey&quot; &quot;darkturquoise&quot; ## [115] &quot;darkviolet&quot; &quot;deeppink&quot; &quot;deeppink1&quot; &quot;deeppink2&quot; &quot;deeppink3&quot; &quot;deeppink4&quot; ## [121] &quot;deepskyblue&quot; &quot;deepskyblue1&quot; &quot;deepskyblue2&quot; &quot;deepskyblue3&quot; &quot;deepskyblue4&quot; &quot;dimgray&quot; ## [127] &quot;dimgrey&quot; &quot;dodgerblue&quot; &quot;dodgerblue1&quot; &quot;dodgerblue2&quot; &quot;dodgerblue3&quot; &quot;dodgerblue4&quot; ## [133] &quot;firebrick&quot; &quot;firebrick1&quot; &quot;firebrick2&quot; &quot;firebrick3&quot; &quot;firebrick4&quot; &quot;floralwhite&quot; ## [139] &quot;forestgreen&quot; &quot;gainsboro&quot; &quot;ghostwhite&quot; &quot;gold&quot; &quot;gold1&quot; &quot;gold2&quot; ## [145] &quot;gold3&quot; &quot;gold4&quot; &quot;goldenrod&quot; &quot;goldenrod1&quot; &quot;goldenrod2&quot; &quot;goldenrod3&quot; ## [151] &quot;goldenrod4&quot; &quot;gray&quot; &quot;gray0&quot; &quot;gray1&quot; &quot;gray2&quot; &quot;gray3&quot; ## [157] &quot;gray4&quot; &quot;gray5&quot; &quot;gray6&quot; &quot;gray7&quot; &quot;gray8&quot; &quot;gray9&quot; ## [163] &quot;gray10&quot; &quot;gray11&quot; &quot;gray12&quot; &quot;gray13&quot; &quot;gray14&quot; &quot;gray15&quot; ## [169] &quot;gray16&quot; &quot;gray17&quot; &quot;gray18&quot; &quot;gray19&quot; &quot;gray20&quot; &quot;gray21&quot; ## [175] &quot;gray22&quot; &quot;gray23&quot; &quot;gray24&quot; &quot;gray25&quot; &quot;gray26&quot; &quot;gray27&quot; ## [181] &quot;gray28&quot; &quot;gray29&quot; &quot;gray30&quot; &quot;gray31&quot; &quot;gray32&quot; &quot;gray33&quot; ## [187] &quot;gray34&quot; &quot;gray35&quot; &quot;gray36&quot; &quot;gray37&quot; &quot;gray38&quot; &quot;gray39&quot; ## [193] &quot;gray40&quot; &quot;gray41&quot; &quot;gray42&quot; &quot;gray43&quot; &quot;gray44&quot; &quot;gray45&quot; ## [199] &quot;gray46&quot; &quot;gray47&quot; &quot;gray48&quot; &quot;gray49&quot; &quot;gray50&quot; &quot;gray51&quot; ## [205] &quot;gray52&quot; &quot;gray53&quot; &quot;gray54&quot; &quot;gray55&quot; &quot;gray56&quot; &quot;gray57&quot; ## [211] &quot;gray58&quot; &quot;gray59&quot; &quot;gray60&quot; &quot;gray61&quot; &quot;gray62&quot; &quot;gray63&quot; ## [217] &quot;gray64&quot; &quot;gray65&quot; &quot;gray66&quot; &quot;gray67&quot; &quot;gray68&quot; &quot;gray69&quot; ## [223] &quot;gray70&quot; &quot;gray71&quot; &quot;gray72&quot; &quot;gray73&quot; &quot;gray74&quot; &quot;gray75&quot; ## [229] &quot;gray76&quot; &quot;gray77&quot; &quot;gray78&quot; &quot;gray79&quot; &quot;gray80&quot; &quot;gray81&quot; ## [235] &quot;gray82&quot; &quot;gray83&quot; &quot;gray84&quot; &quot;gray85&quot; &quot;gray86&quot; &quot;gray87&quot; ## [241] &quot;gray88&quot; &quot;gray89&quot; &quot;gray90&quot; &quot;gray91&quot; &quot;gray92&quot; &quot;gray93&quot; ## [247] &quot;gray94&quot; &quot;gray95&quot; &quot;gray96&quot; &quot;gray97&quot; &quot;gray98&quot; &quot;gray99&quot; ## [253] &quot;gray100&quot; &quot;green&quot; &quot;green1&quot; &quot;green2&quot; &quot;green3&quot; &quot;green4&quot; ## [259] &quot;greenyellow&quot; &quot;grey&quot; &quot;grey0&quot; &quot;grey1&quot; &quot;grey2&quot; &quot;grey3&quot; ## [265] &quot;grey4&quot; &quot;grey5&quot; &quot;grey6&quot; &quot;grey7&quot; &quot;grey8&quot; &quot;grey9&quot; ## [271] &quot;grey10&quot; &quot;grey11&quot; &quot;grey12&quot; &quot;grey13&quot; &quot;grey14&quot; &quot;grey15&quot; ## [277] &quot;grey16&quot; &quot;grey17&quot; &quot;grey18&quot; &quot;grey19&quot; &quot;grey20&quot; &quot;grey21&quot; ## [283] &quot;grey22&quot; &quot;grey23&quot; &quot;grey24&quot; &quot;grey25&quot; &quot;grey26&quot; &quot;grey27&quot; ## [289] &quot;grey28&quot; &quot;grey29&quot; &quot;grey30&quot; &quot;grey31&quot; &quot;grey32&quot; &quot;grey33&quot; ## [295] &quot;grey34&quot; &quot;grey35&quot; &quot;grey36&quot; &quot;grey37&quot; &quot;grey38&quot; &quot;grey39&quot; ## [301] &quot;grey40&quot; &quot;grey41&quot; &quot;grey42&quot; &quot;grey43&quot; &quot;grey44&quot; &quot;grey45&quot; ## [307] &quot;grey46&quot; &quot;grey47&quot; &quot;grey48&quot; &quot;grey49&quot; &quot;grey50&quot; &quot;grey51&quot; ## [313] &quot;grey52&quot; &quot;grey53&quot; &quot;grey54&quot; &quot;grey55&quot; &quot;grey56&quot; &quot;grey57&quot; ## [319] &quot;grey58&quot; &quot;grey59&quot; &quot;grey60&quot; &quot;grey61&quot; &quot;grey62&quot; &quot;grey63&quot; ## [325] &quot;grey64&quot; &quot;grey65&quot; &quot;grey66&quot; &quot;grey67&quot; &quot;grey68&quot; &quot;grey69&quot; ## [331] &quot;grey70&quot; &quot;grey71&quot; &quot;grey72&quot; &quot;grey73&quot; &quot;grey74&quot; &quot;grey75&quot; ## [337] &quot;grey76&quot; &quot;grey77&quot; &quot;grey78&quot; &quot;grey79&quot; &quot;grey80&quot; &quot;grey81&quot; ## [343] &quot;grey82&quot; &quot;grey83&quot; &quot;grey84&quot; &quot;grey85&quot; &quot;grey86&quot; &quot;grey87&quot; ## [349] &quot;grey88&quot; &quot;grey89&quot; &quot;grey90&quot; &quot;grey91&quot; &quot;grey92&quot; &quot;grey93&quot; ## [355] &quot;grey94&quot; &quot;grey95&quot; &quot;grey96&quot; &quot;grey97&quot; &quot;grey98&quot; &quot;grey99&quot; ## [361] &quot;grey100&quot; &quot;honeydew&quot; &quot;honeydew1&quot; &quot;honeydew2&quot; &quot;honeydew3&quot; &quot;honeydew4&quot; ## [367] &quot;hotpink&quot; &quot;hotpink1&quot; &quot;hotpink2&quot; &quot;hotpink3&quot; &quot;hotpink4&quot; &quot;indianred&quot; ## [373] &quot;indianred1&quot; &quot;indianred2&quot; &quot;indianred3&quot; &quot;indianred4&quot; &quot;ivory&quot; &quot;ivory1&quot; ## [379] &quot;ivory2&quot; &quot;ivory3&quot; &quot;ivory4&quot; &quot;khaki&quot; &quot;khaki1&quot; &quot;khaki2&quot; ## [385] &quot;khaki3&quot; &quot;khaki4&quot; &quot;lavender&quot; &quot;lavenderblush&quot; &quot;lavenderblush1&quot; &quot;lavenderblush2&quot; ## [391] &quot;lavenderblush3&quot; &quot;lavenderblush4&quot; &quot;lawngreen&quot; &quot;lemonchiffon&quot; &quot;lemonchiffon1&quot; &quot;lemonchiffon2&quot; ## [397] &quot;lemonchiffon3&quot; &quot;lemonchiffon4&quot; &quot;lightblue&quot; &quot;lightblue1&quot; &quot;lightblue2&quot; &quot;lightblue3&quot; ## [403] &quot;lightblue4&quot; &quot;lightcoral&quot; &quot;lightcyan&quot; &quot;lightcyan1&quot; &quot;lightcyan2&quot; &quot;lightcyan3&quot; ## [409] &quot;lightcyan4&quot; &quot;lightgoldenrod&quot; &quot;lightgoldenrod1&quot; &quot;lightgoldenrod2&quot; &quot;lightgoldenrod3&quot; &quot;lightgoldenrod4&quot; ## [415] &quot;lightgoldenrodyellow&quot; &quot;lightgray&quot; &quot;lightgreen&quot; &quot;lightgrey&quot; &quot;lightpink&quot; &quot;lightpink1&quot; ## [421] &quot;lightpink2&quot; &quot;lightpink3&quot; &quot;lightpink4&quot; &quot;lightsalmon&quot; &quot;lightsalmon1&quot; &quot;lightsalmon2&quot; ## [427] &quot;lightsalmon3&quot; &quot;lightsalmon4&quot; &quot;lightseagreen&quot; &quot;lightskyblue&quot; &quot;lightskyblue1&quot; &quot;lightskyblue2&quot; ## [433] &quot;lightskyblue3&quot; &quot;lightskyblue4&quot; &quot;lightslateblue&quot; &quot;lightslategray&quot; &quot;lightslategrey&quot; &quot;lightsteelblue&quot; ## [439] &quot;lightsteelblue1&quot; &quot;lightsteelblue2&quot; &quot;lightsteelblue3&quot; &quot;lightsteelblue4&quot; &quot;lightyellow&quot; &quot;lightyellow1&quot; ## [445] &quot;lightyellow2&quot; &quot;lightyellow3&quot; &quot;lightyellow4&quot; &quot;limegreen&quot; &quot;linen&quot; &quot;magenta&quot; ## [451] &quot;magenta1&quot; &quot;magenta2&quot; &quot;magenta3&quot; &quot;magenta4&quot; &quot;maroon&quot; &quot;maroon1&quot; ## [457] &quot;maroon2&quot; &quot;maroon3&quot; &quot;maroon4&quot; &quot;mediumaquamarine&quot; &quot;mediumblue&quot; &quot;mediumorchid&quot; ## [463] &quot;mediumorchid1&quot; &quot;mediumorchid2&quot; &quot;mediumorchid3&quot; &quot;mediumorchid4&quot; &quot;mediumpurple&quot; &quot;mediumpurple1&quot; ## [469] &quot;mediumpurple2&quot; &quot;mediumpurple3&quot; &quot;mediumpurple4&quot; &quot;mediumseagreen&quot; &quot;mediumslateblue&quot; &quot;mediumspringgreen&quot; ## [475] &quot;mediumturquoise&quot; &quot;mediumvioletred&quot; &quot;midnightblue&quot; &quot;mintcream&quot; &quot;mistyrose&quot; &quot;mistyrose1&quot; ## [481] &quot;mistyrose2&quot; &quot;mistyrose3&quot; &quot;mistyrose4&quot; &quot;moccasin&quot; &quot;navajowhite&quot; &quot;navajowhite1&quot; ## [487] &quot;navajowhite2&quot; &quot;navajowhite3&quot; &quot;navajowhite4&quot; &quot;navy&quot; &quot;navyblue&quot; &quot;oldlace&quot; ## [493] &quot;olivedrab&quot; &quot;olivedrab1&quot; &quot;olivedrab2&quot; &quot;olivedrab3&quot; &quot;olivedrab4&quot; &quot;orange&quot; ## [499] &quot;orange1&quot; &quot;orange2&quot; &quot;orange3&quot; &quot;orange4&quot; &quot;orangered&quot; &quot;orangered1&quot; ## [505] &quot;orangered2&quot; &quot;orangered3&quot; &quot;orangered4&quot; &quot;orchid&quot; &quot;orchid1&quot; &quot;orchid2&quot; ## [511] &quot;orchid3&quot; &quot;orchid4&quot; &quot;palegoldenrod&quot; &quot;palegreen&quot; &quot;palegreen1&quot; &quot;palegreen2&quot; ## [517] &quot;palegreen3&quot; &quot;palegreen4&quot; &quot;paleturquoise&quot; &quot;paleturquoise1&quot; &quot;paleturquoise2&quot; &quot;paleturquoise3&quot; ## [523] &quot;paleturquoise4&quot; &quot;palevioletred&quot; &quot;palevioletred1&quot; &quot;palevioletred2&quot; &quot;palevioletred3&quot; &quot;palevioletred4&quot; ## [529] &quot;papayawhip&quot; &quot;peachpuff&quot; &quot;peachpuff1&quot; &quot;peachpuff2&quot; &quot;peachpuff3&quot; &quot;peachpuff4&quot; ## [535] &quot;peru&quot; &quot;pink&quot; &quot;pink1&quot; &quot;pink2&quot; &quot;pink3&quot; &quot;pink4&quot; ## [541] &quot;plum&quot; &quot;plum1&quot; &quot;plum2&quot; &quot;plum3&quot; &quot;plum4&quot; &quot;powderblue&quot; ## [547] &quot;purple&quot; &quot;purple1&quot; &quot;purple2&quot; &quot;purple3&quot; &quot;purple4&quot; &quot;red&quot; ## [553] &quot;red1&quot; &quot;red2&quot; &quot;red3&quot; &quot;red4&quot; &quot;rosybrown&quot; &quot;rosybrown1&quot; ## [559] &quot;rosybrown2&quot; &quot;rosybrown3&quot; &quot;rosybrown4&quot; &quot;royalblue&quot; &quot;royalblue1&quot; &quot;royalblue2&quot; ## [565] &quot;royalblue3&quot; &quot;royalblue4&quot; &quot;saddlebrown&quot; &quot;salmon&quot; &quot;salmon1&quot; &quot;salmon2&quot; ## [571] &quot;salmon3&quot; &quot;salmon4&quot; &quot;sandybrown&quot; &quot;seagreen&quot; &quot;seagreen1&quot; &quot;seagreen2&quot; ## [577] &quot;seagreen3&quot; &quot;seagreen4&quot; &quot;seashell&quot; &quot;seashell1&quot; &quot;seashell2&quot; &quot;seashell3&quot; ## [583] &quot;seashell4&quot; &quot;sienna&quot; &quot;sienna1&quot; &quot;sienna2&quot; &quot;sienna3&quot; &quot;sienna4&quot; ## [589] &quot;skyblue&quot; &quot;skyblue1&quot; &quot;skyblue2&quot; &quot;skyblue3&quot; &quot;skyblue4&quot; &quot;slateblue&quot; ## [595] &quot;slateblue1&quot; &quot;slateblue2&quot; &quot;slateblue3&quot; &quot;slateblue4&quot; &quot;slategray&quot; &quot;slategray1&quot; ## [601] &quot;slategray2&quot; &quot;slategray3&quot; &quot;slategray4&quot; &quot;slategrey&quot; &quot;snow&quot; &quot;snow1&quot; ## [607] &quot;snow2&quot; &quot;snow3&quot; &quot;snow4&quot; &quot;springgreen&quot; &quot;springgreen1&quot; &quot;springgreen2&quot; ## [613] &quot;springgreen3&quot; &quot;springgreen4&quot; &quot;steelblue&quot; &quot;steelblue1&quot; &quot;steelblue2&quot; &quot;steelblue3&quot; ## [619] &quot;steelblue4&quot; &quot;tan&quot; &quot;tan1&quot; &quot;tan2&quot; &quot;tan3&quot; &quot;tan4&quot; ## [625] &quot;thistle&quot; &quot;thistle1&quot; &quot;thistle2&quot; &quot;thistle3&quot; &quot;thistle4&quot; &quot;tomato&quot; ## [631] &quot;tomato1&quot; &quot;tomato2&quot; &quot;tomato3&quot; &quot;tomato4&quot; &quot;turquoise&quot; &quot;turquoise1&quot; ## [637] &quot;turquoise2&quot; &quot;turquoise3&quot; &quot;turquoise4&quot; &quot;violet&quot; &quot;violetred&quot; &quot;violetred1&quot; ## [643] &quot;violetred2&quot; &quot;violetred3&quot; &quot;violetred4&quot; &quot;wheat&quot; &quot;wheat1&quot; &quot;wheat2&quot; ## [649] &quot;wheat3&quot; &quot;wheat4&quot; &quot;whitesmoke&quot; &quot;yellow&quot; &quot;yellow1&quot; &quot;yellow2&quot; ## [655] &quot;yellow3&quot; &quot;yellow4&quot; &quot;yellowgreen&quot; grep(&quot;blue&quot;, colors(), value=T) ## [1] &quot;aliceblue&quot; &quot;blue&quot; &quot;blue1&quot; &quot;blue2&quot; &quot;blue3&quot; &quot;blue4&quot; &quot;blueviolet&quot; &quot;cadetblue&quot; ## [9] &quot;cadetblue1&quot; &quot;cadetblue2&quot; &quot;cadetblue3&quot; &quot;cadetblue4&quot; &quot;cornflowerblue&quot; &quot;darkblue&quot; &quot;darkslateblue&quot; &quot;deepskyblue&quot; ## [17] &quot;deepskyblue1&quot; &quot;deepskyblue2&quot; &quot;deepskyblue3&quot; &quot;deepskyblue4&quot; &quot;dodgerblue&quot; &quot;dodgerblue1&quot; &quot;dodgerblue2&quot; &quot;dodgerblue3&quot; ## [25] &quot;dodgerblue4&quot; &quot;lightblue&quot; &quot;lightblue1&quot; &quot;lightblue2&quot; &quot;lightblue3&quot; &quot;lightblue4&quot; &quot;lightskyblue&quot; &quot;lightskyblue1&quot; ## [33] &quot;lightskyblue2&quot; &quot;lightskyblue3&quot; &quot;lightskyblue4&quot; &quot;lightslateblue&quot; &quot;lightsteelblue&quot; &quot;lightsteelblue1&quot; &quot;lightsteelblue2&quot; &quot;lightsteelblue3&quot; ## [41] &quot;lightsteelblue4&quot; &quot;mediumblue&quot; &quot;mediumslateblue&quot; &quot;midnightblue&quot; &quot;navyblue&quot; &quot;powderblue&quot; &quot;royalblue&quot; &quot;royalblue1&quot; ## [49] &quot;royalblue2&quot; &quot;royalblue3&quot; &quot;royalblue4&quot; &quot;skyblue&quot; &quot;skyblue1&quot; &quot;skyblue2&quot; &quot;skyblue3&quot; &quot;skyblue4&quot; ## [57] &quot;slateblue&quot; &quot;slateblue1&quot; &quot;slateblue2&quot; &quot;slateblue3&quot; &quot;slateblue4&quot; &quot;steelblue&quot; &quot;steelblue1&quot; &quot;steelblue2&quot; ## [65] &quot;steelblue3&quot; &quot;steelblue4&quot; In many cases, we need a number of contrasting colors, or multiple shades of a color. R comes with some predefined palette function that can generate those for us. pal1 &lt;- heat.colors(5, alpha=1) # generate 5 colors from the heat palette, opaque pal2 &lt;- rainbow(5, alpha=.5) # generate 5 colors from the heat palette, semi-transparent plot(x=1:10, y=1:10, pch=19, cex=10, col=pal1) plot(x=10:1, y=1:10, pch=19, cex=10, col=pal2) We can also generate our own gradients using colorRampPalette. Note that colorRampPalette returns a function that we can use to generate as many colors from that palette as we need. palf &lt;- colorRampPalette(c(&quot;gray70&quot;, &quot;red&quot;)) plot(x=10:1, y=1:10, pch=19, cex=10, col=palf(100)) To add transparency to colorRampPalette, you need to add a parameter alpha=TRUE: palf &lt;- colorRampPalette(c(rgb(1,1,1, .2),rgb(.8,0,0, .7)), alpha=TRUE) plot(x=10:1, y=1:10, pch=19, cex=10, col=palf(10)) ## R plot functions There are several ways to plot a function in R. If you use the plot function, you need to first define the x coordinates. The plot function connects the coordinates by line segments. So the more coordinates, the smoother the curve looks. x=seq(-5,5,length.out = 100) #generate a sequence between -5 and 5 with length 100 plot(x,x^2,type=&quot;l&quot;, pch=19) To plot two functions in one figure, you need a function to hold the figure. An important parameter you need to set is the xlim and ylim, so the two plots have the same x and y range. You can try dropping these parameters. You may also distinguish the two function by colors or line type, and add a legend. x=seq(-5,5,length.out = 100) plot(x,x^2,col=&quot;red&quot;,type=&quot;l&quot;, lty=1, pch=19,xlim=c(-3,3),ylim=c(-1,5),ylab=F) par(new=TRUE) plot(x,exp(x),col=&quot;blue&quot;,type=&quot;l&quot;,lty=2, pch=19,xlim=c(-3,3),ylim=c(-1,5),ylab=F) legend(&quot;topright&quot;,legend=c(&quot;x^2&quot;,&quot;e^x&quot;),col=c(&quot;red&quot;,&quot;blue&quot;),lty=1:2) dev.off() #once you used par(), need to close the plot device ## RStudioGD ## 2 Multiple plots in one window. x=seq(-5,5,length.out = 100) par(mfrow=c(2,2)) # two rows, two columns plot(x,x^2,col=&quot;red&quot;,type=&quot;l&quot;, lty=1, pch=19,xlim=c(-3,3)) # you can drop ylim now legend(&quot;topright&quot;,legend=c(&quot;x^2&quot;),col=&quot;red&quot;,lty=1) plot(x,exp(x),col=&quot;blue&quot;,type=&quot;l&quot;,lty=2, pch=19,xlim=c(-3,3)) # you can drop ylim now legend(&quot;topright&quot;,legend=&quot;e^x&quot;,col=&quot;blue&quot;,lty=2) eq1=function(x){x^2} curve(eq1,col=&quot;red&quot;,lty=1) eq2 = function(x){exp(x)} curve(eq2,col=&quot;blue&quot;,lty=2) dev.off() #once you used par(), need to close the plot device ## RStudioGD ## 2 1.11 R troubleshooting While I generate many (and often very creative) errors in R, there are three simple things that will most often go wrong for me. Those include: Capitalization. R is case sensitive - a graph vertex named Jack is not the same as one named jack. The function rowSums wont work as rowsums or RowSums. Object class. While many functions are willing to take anything you throw at them, some will still surprisingly require character vector or a factor instead of a numeric vector, or a matrix instead of a data frame. Functions will also occasionally return results in an unexpected formats. Package namespaces. Occasionally problems will arise when different packages contain functions with the same name. R may warn you about this by saying something like The following object(s) are masked from package:igraph as you load a package. One way to deal with this is to call functions from a package explicitly using ::. For instance, if function blah is present in packages A and B, you can call A::blah and B::blah. In other cases the problem is more complicated, and you may have to load packages in certain order, or not use them together at all. For example (and pertinent to this workshop), igraph and statnet packages cause some problems when loaded at the same time. It is best to detach one before loading the other. library(igraph) # load a package detach(package:igraph) # detach a package For more advanced troubleshooting, check out try(), tryCatch(), and debug(). ?tryCatch 1.12 Homework 1 - part 1 Create two 2x3 matrix the way you like and add, subtract, multiply and divide the matrices. Combine these two matrices side by side to create a 2x6 matrix. Create a 4x4 matrix with integers unfiformly distributed in [1, 10]. Access the elements at the 3rd column. Access the elements at the 2nd row. Extract the submatrix whose rows have a value &gt; 8 from this matrix. Find row and column index of maximum and minimum value in this matrix. Create a data frame from four vectors with the names id, cancer type, age, age of onset. Fill the data frame with 5 imaginary patients. Subtract age of onset from age to compute the years since onset using column names. Reorder the rows of this data frame by age. Create a list containing string, numbers, a matrix, and give names to the elements in the list. Create a list containing logical values. Merge these two lists, then add a new element you like as the 5th element in the list. Create two vectors of 50 numbers which are normally distributed with mean=1, standard deviation=1, call them x1, y1. Create two vectors of 50 numbers which are normally distributed with mean=2, standard deviation=1, call them x2, y2. Plot the 100 dots (x1,y1), (x2,y2) in the same plot. Color the dots in (x1,y1) by red, (x2,y2) by blue, set the transparency of the dots to 0.3. Plot two functions \\(f(x)=e^x\\) and \\(g(x)=sin(x)\\) together in one plot. Set the correct range of x and y axis. Add a legend to indicate which is which. Determine the total number of integers between 2 to n such that the integer is the cubic of some other smaller numbers. \\(n=200\\). ## [1] 4 A self-dividing number is a number that is divisible by every digit it contains. For example, 128 is a self-dividing number because (128 %% 1)==0 and (128 %% 2)==0 and (128 %% 8)==0. Find all the self-dividing numbers between 10 to 50. (bonus) Generate 6 random dots in the xy-plane. Return the area of the largest triangle that can be formed by any 3 of the points. Plot the dots and color the triangle. "],["introduction-to-igraph-package.html", "2 Introduction to igraph package 2.1 Create networks 2.2 Edge, vertex, and network attributes 2.3 Some special graphs. 2.4 Homework 1 - part 2", " 2 Introduction to igraph package Install the package igraph if you dont have its latest version (1.0.1) The package (www.igraph.org) is maintained by Gabor Csardi and Tamas Nepusz. # install.packages(&quot;igraph&quot;) Networks in igraph rm(list = ls()) # Remove all the objects we created so far. library(igraph) # Load the igraph package ## ## Attaching package: &#39;igraph&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## decompose, spectrum ## The following object is masked from &#39;package:base&#39;: ## ## union 2.1 Create networks g1 &lt;- graph( edges=c(1,2, 2,3, 3,1), n=3, directed=F ) # an undirected graph with 3 edges The numbers are interpreted as vertex IDs, so the edges are 1&gt;2, 2&gt;3, 3&gt;1 plot(g1) # A simple plot of the network - we&#39;ll talk more about plots later class(g1) ## [1] &quot;igraph&quot; g1 ## IGRAPH 300cb39 U--- 3 3 -- ## + edges from 300cb39: ## [1] 1--2 2--3 1--3 g2 &lt;- graph( edges=c(1,2, 2,3, 3,1), n=10 ) # now with 10 vertices, and directed by default plot(g2) g2 ## IGRAPH 302a06d D--- 10 3 -- ## + edges from 302a06d: ## [1] 1-&gt;2 2-&gt;3 3-&gt;1 g3 &lt;- graph( c(&quot;John&quot;, &quot;Jim&quot;, &quot;Jim&quot;, &quot;Jill&quot;, &quot;Jill&quot;, &quot;John&quot;)) # named vertices When the edge list has vertex names, the number of nodes is not needed plot(g3) g3 ## IGRAPH 30416ce DN-- 3 3 -- ## + attr: name (v/c) ## + edges from 30416ce (vertex names): ## [1] John-&gt;Jim Jim -&gt;Jill Jill-&gt;John g4 &lt;- graph( c(&quot;John&quot;, &quot;Jim&quot;, &quot;Jim&quot;, &quot;Jack&quot;, &quot;Jim&quot;, &quot;Jack&quot;, &quot;John&quot;, &quot;John&quot;), isolates=c(&quot;Jesse&quot;, &quot;Janis&quot;, &quot;Jennifer&quot;, &quot;Justin&quot;) ) In named graphs we can specify isolates by providing a list of their names. plot(g4, edge.arrow.size=.5, vertex.color=&quot;gold&quot;, vertex.size=15, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=1.5, vertex.label.dist=2, edge.curved=0.2) Small graphs can also be generated with a description of this kind: - for undirected tie, +- or-+\" for directed ties pointing left &amp; right, ++ for a symmetric tie, and : for sets of vertices plot(graph_from_literal(a---b, b---c)) # the number of dashes doesn&#39;t matter plot(graph_from_literal(a--+b, b+--c)) plot(graph_from_literal(a+-+b, b+-+c)) plot(graph_from_literal(a:b:c---c:d:e)) gl &lt;- graph_from_literal(a-b-c-d-e-f, a-g-h-b, h-c:f:i, j) #h is linked to every vertex in the set {c,f,i} plot(gl) 2.2 Edge, vertex, and network attributes Access vertices and edges: E(g4) # The edges of the object ## + 4/4 edges from 305a314 (vertex names): ## [1] John-&gt;Jim Jim -&gt;Jack Jim -&gt;Jack John-&gt;John V(g4) # The vertices of the object ## + 7/7 vertices, named, from 305a314: ## [1] John Jim Jack Jesse Janis Jennifer Justin You can also manipulate the network matrix directly: g4[] ## 7 x 7 sparse Matrix of class &quot;dgCMatrix&quot; ## John Jim Jack Jesse Janis Jennifer Justin ## John 1 1 . . . . . ## Jim . . 2 . . . . ## Jack . . . . . . . ## Jesse . . . . . . . ## Janis . . . . . . . ## Jennifer . . . . . . . ## Justin . . . . . . . g4[1,] ## John Jim Jack Jesse Janis Jennifer Justin ## 1 1 0 0 0 0 0 g4[3,3] &lt;- 10 g4[5,7] &lt;- 10 Add attributes to the network, vertices, or edges: V(g4)$name # automatically generated when we created the network. ## [1] &quot;John&quot; &quot;Jim&quot; &quot;Jack&quot; &quot;Jesse&quot; &quot;Janis&quot; &quot;Jennifer&quot; &quot;Justin&quot; V(g4)$gender &lt;- c(&quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;) E(g4)$type &lt;- &quot;email&quot; # Edge attribute, assign &quot;email&quot; to all edges E(g4)$weight &lt;- 10 # Edge weight, setting all existing edges to 10 Examine attributes edge_attr(g4) ## $type ## [1] &quot;email&quot; &quot;email&quot; &quot;email&quot; &quot;email&quot; &quot;email&quot; &quot;email&quot; ## ## $weight ## [1] 10 10 10 10 10 10 vertex_attr(g4) ## $name ## [1] &quot;John&quot; &quot;Jim&quot; &quot;Jack&quot; &quot;Jesse&quot; &quot;Janis&quot; &quot;Jennifer&quot; &quot;Justin&quot; ## ## $gender ## [1] &quot;male&quot; &quot;male&quot; &quot;male&quot; &quot;male&quot; &quot;female&quot; &quot;female&quot; &quot;male&quot; graph_attr(g4) ## named list() Another way to set attributes (you can similarly use set_edge_attr(), set_vertex_attr(), etc.) g4 &lt;- set_graph_attr(g4, &quot;name&quot;, &quot;Email Network&quot;) g4 &lt;- set_graph_attr(g4, &quot;something&quot;, &quot;A thing&quot;) graph_attr_names(g4) ## [1] &quot;name&quot; &quot;something&quot; graph_attr(g4, &quot;name&quot;) ## [1] &quot;Email Network&quot; graph_attr(g4) ## $name ## [1] &quot;Email Network&quot; ## ## $something ## [1] &quot;A thing&quot; g4 &lt;- delete_graph_attr(g4, &quot;something&quot;) graph_attr(g4) ## $name ## [1] &quot;Email Network&quot; plot(g4, edge.arrow.size=.5, vertex.label.color=&quot;black&quot;, vertex.label.dist=1.5, vertex.color=c( &quot;pink&quot;, &quot;skyblue&quot;)[1+(V(g4)$gender==&quot;male&quot;)] ) #V(g4)$gender==&quot;male&quot; returns a boolean vector, +1 converts 0--&gt;1, 1--&gt;2. #Then c( &quot;pink&quot;, &quot;skyblue&quot;)[1+(V(g4)$gender==&quot;male&quot;)] generates a vector such that 1 is mapped to pink, and 2 is mapped to skyblue. g4 has two edges going from Jim to Jack, and a loop from John to himself. We can simplify our graph to remove loops &amp; multiple edges between the same nodes. Use edge.attr.comb to indicate how edge attributes are to be combined - possible options include sum, mean, prod (product), min, max, first/last (selects the first/last edges attribute). Option ignore says the attribute should be disregarded and dropped. g4s &lt;- simplify( g4, remove.multiple = T, remove.loops = F, edge.attr.comb=list(weight=&quot;sum&quot;, type=&quot;ignore&quot;) ) plot(g4s, vertex.label.dist=1.5) g4s ## IGRAPH 31093ac DNW- 7 5 -- Email Network ## + attr: name (g/c), name (v/c), gender (v/c), weight (e/n) ## + edges from 31093ac (vertex names): ## [1] John -&gt;John John -&gt;Jim Jim -&gt;Jack Jack -&gt;Jack Janis-&gt;Justin The description of an igraph object starts with up to four letters: D or U, for a directed or undirected graph N for a named graph (where nodes have a name attribute) W for a weighted graph (where edges have a weight attribute) B for a bipartite (two-mode) graph (where nodes have a type attribute) The two numbers that follow (7 5) refer to the number of nodes and edges in the graph. The description also lists node &amp; edge attributes, for example: \\((g/c)\\) - graph-level character attribute \\((v/c)\\) - vertex-level character attribute \\((e/n)\\) - edge-level numeric attribute 2.3 Some special graphs. Empty graph eg &lt;- make_empty_graph(40) plot(eg, vertex.size=10, vertex.label=NA) Full graph (complete graph) fg &lt;- make_full_graph(40) plot(fg, vertex.size=10, vertex.label=NA) Star graph st &lt;- make_star(40) plot(st, vertex.size=10, vertex.label=NA) Tree graph tr &lt;- make_tree(40, children = 3, mode = &quot;undirected&quot;) plot(tr, vertex.size=10, vertex.label=NA) Ring graph rn &lt;- make_ring(40) plot(rn, vertex.size=10, vertex.label=NA) Erdos-Renyi random graph \\(R(n,m)\\) (n is number of nodes, m is the number of edges) er &lt;- sample_gnp (n=100, p=0.02) plot(er, vertex.size=6, vertex.label=NA) Watts-Strogatz small-world graph Creates a lattice with dim dimensions of size nodes each, and rewires edges randomly with probability p. You can allow loops and multiple edges. The neighborhood in which edges are connected is nei. sw &lt;- sample_smallworld(dim=2, size=10, nei=1, p=0.1) plot(sw, vertex.size=6, vertex.label=NA, layout=layout_in_circle) Barabasi-Albert preferential attachment model for scale-free graphs n is number of nodes, power is the power of attachment (1 is linear) m is the number of edges added on each time step ba &lt;- sample_pa(n=100, power=1, m=1, directed=F) plot(ba, vertex.size=6, vertex.label=NA) igraph can also give you some notable historical graphs. For instance: zach &lt;- graph(&quot;Zachary&quot;) # the Zachary carate club plot(zach, vertex.size=10, vertex.label=NA) Rewiring a graph each_edge() is a rewiring method that changes the edge endpoints uniformly randomly with a probability prob. rn.rewired &lt;- rewire(rn, each_edge(prob=0.1)) plot(rn.rewired, vertex.size=10, vertex.label=NA) Rewire to connect vertices to other vertices at a certain distance. rn.neigh = connect.neighborhood(rn, 5) plot(rn.neigh, vertex.size=8, vertex.label=NA) Combine graphs (disjoint union, assuming separate vertex sets): %du% plot(rn, vertex.size=10, vertex.label=NA) plot(tr, vertex.size=10, vertex.label=NA) plot(rn %du% tr, vertex.size=10, vertex.label=NA) 2.4 Homework 1 - part 2 Generate the social network based on the data we collected in the class. Plot the network with nodes colored by sex. Plot the netwrok with nodes colored by level (1st year, 2nd year). "],["data-to-network.html", "3 Data to network 3.1 Reading network data from files 3.2 Turning networks into igraph objects 3.3 DATASET 1 3.4 DATASET 2 3.5 Plot parameters in igraph 3.6 Network Layouts 3.7 Homework 1 - part 3", " 3 Data to network 3.1 Reading network data from files rm(list = ls()) # clear the workspace again Download the archive with the data files from http://bitly.com/netscix2016 Set the working directory to the folder containing the workshop files: setwd(&quot;D:\\\\markdown&quot;) # use &#39;\\\\&#39; or &#39;/&#39; in the directory DATASET 1: edgelist nodes &lt;- read.csv(&quot;Dataset1-Media-Example-NODES.csv&quot;, header=T, as.is=T) links &lt;- read.csv(&quot;Dataset1-Media-Example-EDGES.csv&quot;, header=T, as.is=T) Examine the data: head(nodes) ## id media media.type type.label audience.size ## 1 s01 NY Times 1 Newspaper 20 ## 2 s02 Washington Post 1 Newspaper 25 ## 3 s03 Wall Street Journal 1 Newspaper 30 ## 4 s04 USA Today 1 Newspaper 32 ## 5 s05 LA Times 1 Newspaper 20 ## 6 s06 New York Post 1 Newspaper 50 head(links) ## from to weight type ## 1 s01 s02 10 hyperlink ## 2 s01 s02 12 hyperlink ## 3 s01 s03 22 hyperlink ## 4 s01 s04 21 hyperlink ## 5 s04 s11 22 mention ## 6 s05 s15 21 mention nrow(nodes); length(unique(nodes$id)) ## [1] 17 ## [1] 17 nrow(links); nrow(unique(links[,c(&quot;from&quot;, &quot;to&quot;)])) ## [1] 52 ## [1] 49 Collapse multiple links of the same type between the same two nodes by summing their weights, using aggregate() by from, to, &amp; type: (we dont use simplify() here so as not to collapse different link types) links &lt;- aggregate(links[,3], links[,-3], sum) links &lt;- links[order(links$from, links$to),] colnames(links)[4] &lt;- &quot;weight&quot; rownames(links) &lt;- NULL DATASET 2: matrix nodes2 &lt;- read.csv(&quot;Dataset2-Media-User-Example-NODES.csv&quot;, header=T, as.is=T) links2 &lt;- read.csv(&quot;Dataset2-Media-User-Example-EDGES.csv&quot;, header=T, row.names=1) Examine the data: head(nodes2) ## id media media.type media.name audience.size ## 1 s01 NYT 1 Newspaper 20 ## 2 s02 WaPo 1 Newspaper 25 ## 3 s03 WSJ 1 Newspaper 30 ## 4 s04 USAT 1 Newspaper 32 ## 5 s05 LATimes 1 Newspaper 20 ## 6 s06 CNN 2 TV 56 head(links2) ## U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19 U20 ## s01 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## s02 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 ## s03 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 ## s04 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 ## s05 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 ## s06 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 links2 is an adjacency matrix for a two-mode network: links2 &lt;- as.matrix(links2) dim(links2) ## [1] 10 20 dim(nodes2) ## [1] 30 5 3.2 Turning networks into igraph objects 3.3 DATASET 1 Converting the data to an igraph object: The graph.data.frame function, which takes two data frames: d and vertices. d describes the edges of the network - it should start with two columns containing the source and target node IDs for each network tie. vertices should start with a column of node IDs. Any additional columns in either data frame are interpreted as attributes. library(igraph) net &lt;- graph_from_data_frame(d=links, vertices=nodes, directed=T) Examine the resulting object: class(net) ## [1] &quot;igraph&quot; net ## IGRAPH 3252186 DNW- 17 49 -- ## + attr: name (v/c), media (v/c), media.type (v/n), type.label (v/c), audience.size (v/n), type (e/c), weight (e/n) ## + edges from 3252186 (vertex names): ## [1] s01-&gt;s02 s01-&gt;s03 s01-&gt;s04 s01-&gt;s15 s02-&gt;s01 s02-&gt;s03 s02-&gt;s09 s02-&gt;s10 s03-&gt;s01 s03-&gt;s04 s03-&gt;s05 s03-&gt;s08 s03-&gt;s10 s03-&gt;s11 s03-&gt;s12 s04-&gt;s03 ## [17] s04-&gt;s06 s04-&gt;s11 s04-&gt;s12 s04-&gt;s17 s05-&gt;s01 s05-&gt;s02 s05-&gt;s09 s05-&gt;s15 s06-&gt;s06 s06-&gt;s16 s06-&gt;s17 s07-&gt;s03 s07-&gt;s08 s07-&gt;s10 s07-&gt;s14 s08-&gt;s03 ## [33] s08-&gt;s07 s08-&gt;s09 s09-&gt;s10 s10-&gt;s03 s12-&gt;s06 s12-&gt;s13 s12-&gt;s14 s13-&gt;s12 s13-&gt;s17 s14-&gt;s11 s14-&gt;s13 s15-&gt;s01 s15-&gt;s04 s15-&gt;s06 s16-&gt;s06 s16-&gt;s17 ## [49] s17-&gt;s04 We can look at the nodes, edges, and their attributes: E(net) ## + 49/49 edges from 3252186 (vertex names): ## [1] s01-&gt;s02 s01-&gt;s03 s01-&gt;s04 s01-&gt;s15 s02-&gt;s01 s02-&gt;s03 s02-&gt;s09 s02-&gt;s10 s03-&gt;s01 s03-&gt;s04 s03-&gt;s05 s03-&gt;s08 s03-&gt;s10 s03-&gt;s11 s03-&gt;s12 s04-&gt;s03 ## [17] s04-&gt;s06 s04-&gt;s11 s04-&gt;s12 s04-&gt;s17 s05-&gt;s01 s05-&gt;s02 s05-&gt;s09 s05-&gt;s15 s06-&gt;s06 s06-&gt;s16 s06-&gt;s17 s07-&gt;s03 s07-&gt;s08 s07-&gt;s10 s07-&gt;s14 s08-&gt;s03 ## [33] s08-&gt;s07 s08-&gt;s09 s09-&gt;s10 s10-&gt;s03 s12-&gt;s06 s12-&gt;s13 s12-&gt;s14 s13-&gt;s12 s13-&gt;s17 s14-&gt;s11 s14-&gt;s13 s15-&gt;s01 s15-&gt;s04 s15-&gt;s06 s16-&gt;s06 s16-&gt;s17 ## [49] s17-&gt;s04 V(net) ## + 17/17 vertices, named, from 3252186: ## [1] s01 s02 s03 s04 s05 s06 s07 s08 s09 s10 s11 s12 s13 s14 s15 s16 s17 E(net)$type ## [1] &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;mention&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; ## [13] &quot;mention&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;mention&quot; &quot;mention&quot; &quot;hyperlink&quot; &quot;mention&quot; &quot;mention&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;mention&quot; ## [25] &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;mention&quot; &quot;mention&quot; &quot;mention&quot; &quot;hyperlink&quot; &quot;mention&quot; &quot;hyperlink&quot; &quot;mention&quot; &quot;mention&quot; &quot;mention&quot; &quot;hyperlink&quot; ## [37] &quot;mention&quot; &quot;hyperlink&quot; &quot;mention&quot; &quot;hyperlink&quot; &quot;mention&quot; &quot;mention&quot; &quot;mention&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;hyperlink&quot; &quot;mention&quot; ## [49] &quot;hyperlink&quot; V(net)$media ## [1] &quot;NY Times&quot; &quot;Washington Post&quot; &quot;Wall Street Journal&quot; &quot;USA Today&quot; &quot;LA Times&quot; &quot;New York Post&quot; ## [7] &quot;CNN&quot; &quot;MSNBC&quot; &quot;FOX News&quot; &quot;ABC&quot; &quot;BBC&quot; &quot;Yahoo News&quot; ## [13] &quot;Google News&quot; &quot;Reuters.com&quot; &quot;NYTimes.com&quot; &quot;WashingtonPost.com&quot; &quot;AOL.com&quot; plot(net, edge.arrow.size=.4,vertex.label=NA) Removing loops from the graph: net &lt;- simplify(net, remove.multiple = F, remove.loops = T) If you need them, you can extract an edge list or a matrix from igraph networks. as_edgelist(net, names=T) ## [,1] [,2] ## [1,] &quot;s01&quot; &quot;s02&quot; ## [2,] &quot;s01&quot; &quot;s03&quot; ## [3,] &quot;s01&quot; &quot;s04&quot; ## [4,] &quot;s01&quot; &quot;s15&quot; ## [5,] &quot;s02&quot; &quot;s01&quot; ## [6,] &quot;s02&quot; &quot;s03&quot; ## [7,] &quot;s02&quot; &quot;s09&quot; ## [8,] &quot;s02&quot; &quot;s10&quot; ## [9,] &quot;s03&quot; &quot;s01&quot; ## [10,] &quot;s03&quot; &quot;s04&quot; ## [11,] &quot;s03&quot; &quot;s05&quot; ## [12,] &quot;s03&quot; &quot;s08&quot; ## [13,] &quot;s03&quot; &quot;s10&quot; ## [14,] &quot;s03&quot; &quot;s11&quot; ## [15,] &quot;s03&quot; &quot;s12&quot; ## [16,] &quot;s04&quot; &quot;s03&quot; ## [17,] &quot;s04&quot; &quot;s06&quot; ## [18,] &quot;s04&quot; &quot;s11&quot; ## [19,] &quot;s04&quot; &quot;s12&quot; ## [20,] &quot;s04&quot; &quot;s17&quot; ## [21,] &quot;s05&quot; &quot;s01&quot; ## [22,] &quot;s05&quot; &quot;s02&quot; ## [23,] &quot;s05&quot; &quot;s09&quot; ## [24,] &quot;s05&quot; &quot;s15&quot; ## [25,] &quot;s06&quot; &quot;s16&quot; ## [26,] &quot;s06&quot; &quot;s17&quot; ## [27,] &quot;s07&quot; &quot;s03&quot; ## [28,] &quot;s07&quot; &quot;s08&quot; ## [29,] &quot;s07&quot; &quot;s10&quot; ## [30,] &quot;s07&quot; &quot;s14&quot; ## [31,] &quot;s08&quot; &quot;s03&quot; ## [32,] &quot;s08&quot; &quot;s07&quot; ## [33,] &quot;s08&quot; &quot;s09&quot; ## [34,] &quot;s09&quot; &quot;s10&quot; ## [35,] &quot;s10&quot; &quot;s03&quot; ## [36,] &quot;s12&quot; &quot;s06&quot; ## [37,] &quot;s12&quot; &quot;s13&quot; ## [38,] &quot;s12&quot; &quot;s14&quot; ## [39,] &quot;s13&quot; &quot;s12&quot; ## [40,] &quot;s13&quot; &quot;s17&quot; ## [41,] &quot;s14&quot; &quot;s11&quot; ## [42,] &quot;s14&quot; &quot;s13&quot; ## [43,] &quot;s15&quot; &quot;s01&quot; ## [44,] &quot;s15&quot; &quot;s04&quot; ## [45,] &quot;s15&quot; &quot;s06&quot; ## [46,] &quot;s16&quot; &quot;s06&quot; ## [47,] &quot;s16&quot; &quot;s17&quot; ## [48,] &quot;s17&quot; &quot;s04&quot; as_adjacency_matrix(net, attr=&quot;weight&quot;) ## 17 x 17 sparse Matrix of class &quot;dgCMatrix&quot; ## [[ suppressing 17 column names &#39;s01&#39;, &#39;s02&#39;, &#39;s03&#39; ... ]] ## ## s01 . 22 22 21 . . . . . . . . . . 20 . . ## s02 23 . 21 . . . . . 1 5 . . . . . . . ## s03 21 . . 22 1 . . 4 . 2 1 1 . . . . . ## s04 . . 23 . . 1 . . . . 22 3 . . . . 2 ## s05 1 21 . . . . . . 2 . . . . . 21 . . ## s06 . . . . . . . . . . . . . . . 21 21 ## s07 . . 1 . . . . 22 . 21 . . . 4 . . . ## s08 . . 2 . . . 21 . 23 . . . . . . . . ## s09 . . . . . . . . . 21 . . . . . . . ## s10 . . 2 . . . . . . . . . . . . . . ## s11 . . . . . . . . . . . . . . . . . ## s12 . . . . . 2 . . . . . . 22 22 . . . ## s13 . . . . . . . . . . . 21 . . . . 1 ## s14 . . . . . . . . . . 1 . 21 . . . . ## s15 22 . . 1 . 4 . . . . . . . . . . . ## s16 . . . . . 23 . . . . . . . . . . 21 ## s17 . . . 4 . . . . . . . . . . . . . Or data frames describing nodes and edges: as_data_frame(net, what=&quot;edges&quot;) ## from to type weight ## 1 s01 s02 hyperlink 22 ## 2 s01 s03 hyperlink 22 ## 3 s01 s04 hyperlink 21 ## 4 s01 s15 mention 20 ## 5 s02 s01 hyperlink 23 ## 6 s02 s03 hyperlink 21 ## 7 s02 s09 hyperlink 1 ## 8 s02 s10 hyperlink 5 ## 9 s03 s01 hyperlink 21 ## 10 s03 s04 hyperlink 22 ## 11 s03 s05 hyperlink 1 ## 12 s03 s08 hyperlink 4 ## 13 s03 s10 mention 2 ## 14 s03 s11 hyperlink 1 ## 15 s03 s12 hyperlink 1 ## 16 s04 s03 hyperlink 23 ## 17 s04 s06 mention 1 ## 18 s04 s11 mention 22 ## 19 s04 s12 hyperlink 3 ## 20 s04 s17 mention 2 ## 21 s05 s01 mention 1 ## 22 s05 s02 hyperlink 21 ## 23 s05 s09 hyperlink 2 ## 24 s05 s15 mention 21 ## 25 s06 s16 hyperlink 21 ## 26 s06 s17 mention 21 ## 27 s07 s03 mention 1 ## 28 s07 s08 mention 22 ## 29 s07 s10 hyperlink 21 ## 30 s07 s14 mention 4 ## 31 s08 s03 hyperlink 2 ## 32 s08 s07 mention 21 ## 33 s08 s09 mention 23 ## 34 s09 s10 mention 21 ## 35 s10 s03 hyperlink 2 ## 36 s12 s06 mention 2 ## 37 s12 s13 hyperlink 22 ## 38 s12 s14 mention 22 ## 39 s13 s12 hyperlink 21 ## 40 s13 s17 mention 1 ## 41 s14 s11 mention 1 ## 42 s14 s13 mention 21 ## 43 s15 s01 hyperlink 22 ## 44 s15 s04 hyperlink 1 ## 45 s15 s06 hyperlink 4 ## 46 s16 s06 hyperlink 23 ## 47 s16 s17 mention 21 ## 48 s17 s04 hyperlink 4 as_data_frame(net, what=&quot;vertices&quot;) ## name media media.type type.label audience.size ## s01 s01 NY Times 1 Newspaper 20 ## s02 s02 Washington Post 1 Newspaper 25 ## s03 s03 Wall Street Journal 1 Newspaper 30 ## s04 s04 USA Today 1 Newspaper 32 ## s05 s05 LA Times 1 Newspaper 20 ## s06 s06 New York Post 1 Newspaper 50 ## s07 s07 CNN 2 TV 56 ## s08 s08 MSNBC 2 TV 34 ## s09 s09 FOX News 2 TV 60 ## s10 s10 ABC 2 TV 23 ## s11 s11 BBC 2 TV 34 ## s12 s12 Yahoo News 3 Online 33 ## s13 s13 Google News 3 Online 23 ## s14 s14 Reuters.com 3 Online 12 ## s15 s15 NYTimes.com 3 Online 24 ## s16 s16 WashingtonPost.com 3 Online 28 ## s17 s17 AOL.com 3 Online 33 3.4 DATASET 2 head(nodes2) ## id media media.type media.name audience.size ## 1 s01 NYT 1 Newspaper 20 ## 2 s02 WaPo 1 Newspaper 25 ## 3 s03 WSJ 1 Newspaper 30 ## 4 s04 USAT 1 Newspaper 32 ## 5 s05 LATimes 1 Newspaper 20 ## 6 s06 CNN 2 TV 56 head(links2) ## U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19 U20 ## s01 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## s02 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 ## s03 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 ## s04 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 ## s05 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 ## s06 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 net2 &lt;- graph_from_incidence_matrix(links2) A built-in vertex attribute type shows which mode vertices belong to. table(V(net2)$type) ## ## FALSE TRUE ## 10 20 plot(net2,vertex.label=NA) To transform a one-mode network matrix into an igraph object, use graph_from_adjacency_matrix() We can also easily generate bipartite projections for the two-mode network: (co-memberships are easy to calculate by multiplying the network matrix by its transposed matrix, or using igraphs bipartite.projection function) net2.bp &lt;- bipartite.projection(net2) We can calculate the projections manually as well: as_incidence_matrix(net2) %*% t(as_incidence_matrix(net2)) ## s01 s02 s03 s04 s05 s06 s07 s08 s09 s10 ## s01 3 0 0 0 0 0 0 0 0 1 ## s02 0 3 0 0 0 0 0 0 1 0 ## s03 0 0 4 1 0 0 0 0 1 0 ## s04 0 0 1 3 1 0 0 0 0 1 ## s05 0 0 0 1 3 1 0 0 0 1 ## s06 0 0 0 0 1 3 1 1 0 0 ## s07 0 0 0 0 0 1 3 1 0 0 ## s08 0 0 0 0 0 1 1 4 1 0 ## s09 0 1 1 0 0 0 0 1 3 0 ## s10 1 0 0 1 1 0 0 0 0 2 t(as_incidence_matrix(net2)) %*% as_incidence_matrix(net2) ## U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19 U20 ## U01 2 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 ## U02 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## U03 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## U04 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 ## U05 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 ## U06 0 0 0 0 0 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 ## U07 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 ## U08 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 ## U09 0 0 0 0 0 1 1 1 2 1 1 0 0 0 0 0 0 0 0 0 ## U10 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 ## U11 1 0 0 0 0 0 0 0 1 1 3 1 1 0 0 0 0 0 0 0 ## U12 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 ## U13 0 0 0 0 0 0 0 0 0 0 1 1 2 1 0 0 1 0 0 0 ## U14 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 0 0 0 ## U15 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 ## U16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 1 1 1 0 ## U17 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 2 1 1 0 ## U18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 ## U19 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 1 ## U20 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 2 plot(net2.bp$proj1, vertex.label.color=&quot;black&quot;, vertex.label.dist=1, vertex.label=nodes2$media[!is.na(nodes2$media.type)]) plot(net2.bp$proj2, vertex.label.color=&quot;black&quot;, vertex.label.dist=1, vertex.label=nodes2$media[ is.na(nodes2$media.type)]) 3.5 Plot parameters in igraph Plotting with igraph: node options (starting with vertex.) and edge options (starting with edge.). A list of options is included in your handout. ?igraph.plotting We can set the node &amp; edge options in two ways - one is to specify them in the plot() function, as we are doing below. Plot with curved edges (edge.curved=.1) and reduce arrow size: plot(net, edge.arrow.size=.4, edge.curved=.1) Set node color to orange and the border color to hex #555555 Replace the vertex label with the node names stored in media plot(net, edge.arrow.size=.2, edge.curved=0, vertex.color=&quot;orange&quot;, vertex.frame.color=&quot;#555555&quot;, vertex.label=V(net)$media, vertex.label.color=&quot;black&quot;, vertex.label.cex=.7) The second way to set attributes is to add them to the igraph object. Generate colors based on media type: colrs &lt;- c(&quot;gray50&quot;, &quot;tomato&quot;, &quot;gold&quot;) V(net)$color &lt;- colrs[V(net)$media.type] Set node size based on audience size: V(net)$size &lt;- V(net)$audience.size*0.7 The labels are currently node IDs. Setting them to NA will render no labels: V(net)$label.color &lt;- &quot;black&quot; V(net)$label &lt;- NA Set edge width based on weight: E(net)$width &lt;- E(net)$weight/6 change arrow size and edge color: E(net)$arrow.size &lt;- .2 E(net)$edge.color &lt;- &quot;gray80&quot; plot(net) We can also override the attributes explicitly in the plot: plot(net, edge.color=&quot;orange&quot;, vertex.color=&quot;gray50&quot;) We can also add a legend explaining the meaning of the colors we used: plot(net) legend(x=-1.1, y=-1.1, c(&quot;Newspaper&quot;,&quot;Television&quot;, &quot;Online News&quot;), pch=21, col=&quot;#777777&quot;, pt.bg=colrs, pt.cex=2.5, bty=&quot;n&quot;, ncol=1) Sometimes, especially with semantic networks, we may be interested in plotting only the labels of the nodes: plot(net, vertex.shape=&quot;none&quot;, vertex.label=V(net)$media, vertex.label.font=2, vertex.label.color=&quot;gray40&quot;, vertex.label.cex=.7, edge.color=&quot;gray85&quot;) Lets color the edges of the graph based on their source node color. Well get the starting node for each edge with ends(). edge.start &lt;- ends(net, es=E(net), names=F)[,1] edge.col &lt;- V(net)$color[edge.start] plot(net, edge.color=edge.col, edge.curved=.1) 3.6 Network Layouts Network layouts are algorithms that return coordinates for each node in a network. Lets generate a slightly larger 80-node graph. net.bg &lt;- sample_pa(80, 1.2) V(net.bg)$size &lt;- 8 V(net.bg)$frame.color &lt;- &quot;white&quot; V(net.bg)$color &lt;- &quot;orange&quot; V(net.bg)$label &lt;- &quot;&quot; E(net.bg)$arrow.mode &lt;- 0 plot(net.bg) You can set the layout in the plot function: plot(net.bg, layout=layout_randomly) Or calculate the vertex coordinates in advance: l &lt;- layout_in_circle(net.bg) plot(net.bg, layout=l) l is simply a matrix of x,y coordinates (N x 2) for the N nodes in the graph. You can generate your own: l ## [,1] [,2] ## [1,] 1.000000e+00 0.000000e+00 ## [2,] 9.969173e-01 7.845910e-02 ## [3,] 9.876883e-01 1.564345e-01 ## [4,] 9.723699e-01 2.334454e-01 ## [5,] 9.510565e-01 3.090170e-01 ## [6,] 9.238795e-01 3.826834e-01 ## [7,] 8.910065e-01 4.539905e-01 ## [8,] 8.526402e-01 5.224986e-01 ## [9,] 8.090170e-01 5.877853e-01 ## [10,] 7.604060e-01 6.494480e-01 ## [11,] 7.071068e-01 7.071068e-01 ## [12,] 6.494480e-01 7.604060e-01 ## [13,] 5.877853e-01 8.090170e-01 ## [14,] 5.224986e-01 8.526402e-01 ## [15,] 4.539905e-01 8.910065e-01 ## [16,] 3.826834e-01 9.238795e-01 ## [17,] 3.090170e-01 9.510565e-01 ## [18,] 2.334454e-01 9.723699e-01 ## [19,] 1.564345e-01 9.876883e-01 ## [20,] 7.845910e-02 9.969173e-01 ## [21,] 6.123032e-17 1.000000e+00 ## [22,] -7.845910e-02 9.969173e-01 ## [23,] -1.564345e-01 9.876883e-01 ## [24,] -2.334454e-01 9.723699e-01 ## [25,] -3.090170e-01 9.510565e-01 ## [26,] -3.826834e-01 9.238795e-01 ## [27,] -4.539905e-01 8.910065e-01 ## [28,] -5.224986e-01 8.526402e-01 ## [29,] -5.877853e-01 8.090170e-01 ## [30,] -6.494480e-01 7.604060e-01 ## [31,] -7.071068e-01 7.071068e-01 ## [32,] -7.604060e-01 6.494480e-01 ## [33,] -8.090170e-01 5.877853e-01 ## [34,] -8.526402e-01 5.224986e-01 ## [35,] -8.910065e-01 4.539905e-01 ## [36,] -9.238795e-01 3.826834e-01 ## [37,] -9.510565e-01 3.090170e-01 ## [38,] -9.723699e-01 2.334454e-01 ## [39,] -9.876883e-01 1.564345e-01 ## [40,] -9.969173e-01 7.845910e-02 ## [41,] -1.000000e+00 1.224606e-16 ## [42,] -9.969173e-01 -7.845910e-02 ## [43,] -9.876883e-01 -1.564345e-01 ## [44,] -9.723699e-01 -2.334454e-01 ## [45,] -9.510565e-01 -3.090170e-01 ## [46,] -9.238795e-01 -3.826834e-01 ## [47,] -8.910065e-01 -4.539905e-01 ## [48,] -8.526402e-01 -5.224986e-01 ## [49,] -8.090170e-01 -5.877853e-01 ## [50,] -7.604060e-01 -6.494480e-01 ## [51,] -7.071068e-01 -7.071068e-01 ## [52,] -6.494480e-01 -7.604060e-01 ## [53,] -5.877853e-01 -8.090170e-01 ## [54,] -5.224986e-01 -8.526402e-01 ## [55,] -4.539905e-01 -8.910065e-01 ## [56,] -3.826834e-01 -9.238795e-01 ## [57,] -3.090170e-01 -9.510565e-01 ## [58,] -2.334454e-01 -9.723699e-01 ## [59,] -1.564345e-01 -9.876883e-01 ## [60,] -7.845910e-02 -9.969173e-01 ## [61,] -1.836910e-16 -1.000000e+00 ## [62,] 7.845910e-02 -9.969173e-01 ## [63,] 1.564345e-01 -9.876883e-01 ## [64,] 2.334454e-01 -9.723699e-01 ## [65,] 3.090170e-01 -9.510565e-01 ## [66,] 3.826834e-01 -9.238795e-01 ## [67,] 4.539905e-01 -8.910065e-01 ## [68,] 5.224986e-01 -8.526402e-01 ## [69,] 5.877853e-01 -8.090170e-01 ## [70,] 6.494480e-01 -7.604060e-01 ## [71,] 7.071068e-01 -7.071068e-01 ## [72,] 7.604060e-01 -6.494480e-01 ## [73,] 8.090170e-01 -5.877853e-01 ## [74,] 8.526402e-01 -5.224986e-01 ## [75,] 8.910065e-01 -4.539905e-01 ## [76,] 9.238795e-01 -3.826834e-01 ## [77,] 9.510565e-01 -3.090170e-01 ## [78,] 9.723699e-01 -2.334454e-01 ## [79,] 9.876883e-01 -1.564345e-01 ## [80,] 9.969173e-01 -7.845910e-02 l &lt;- cbind(1:vcount(net.bg), c(1, vcount(net.bg):2)) plot(net.bg, layout=l) This layout is just an example and not very helpful - thankfully igraph has a number of built-in layouts, including: Randomly placed vertices l &lt;- layout_randomly(net.bg) plot(net.bg, layout=l) Circle layout l &lt;- layout_in_circle(net.bg) plot(net.bg, layout=l) 3D sphere layout l &lt;- layout_on_sphere(net.bg) plot(net.bg, layout=l) The Fruchterman-Reingold force-directed algorithm Nice but slow, most often used in graphs smaller than ~1000 vertices. l &lt;- layout_with_fr(net.bg) plot(net.bg, layout=l) You will also notice that the layout is not deterministic - different runs will result in slightly different configurations. Saving the layout in l allows us to get the exact same result multiple times. par(mfrow=c(2,2), mar=c(1,1,1,1)) plot(net.bg, layout=layout_with_fr) plot(net.bg, layout=layout_with_fr) plot(net.bg, layout=l) plot(net.bg, layout=l) dev.off() ## RStudioGD ## 2 By default, the coordinates of the plots are rescaled to the [-1,1] interval for both x and y. You can change that with the parameter rescale=FALSE and rescale your plot manually by multiplying the coordinates by a scalar. You can use norm_coords to normalize the plot with the boundaries you want. Get the layout coordinates: l &lt;- layout_with_fr(net.bg) Normalize them so that they are in the -1, 1 interval: l &lt;- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1) par(mfrow=c(2,2), mar=c(0,0,0,0)) plot(net.bg, rescale=F, layout=l*0.4) plot(net.bg, rescale=F, layout=l*0.8) plot(net.bg, rescale=F, layout=l*1.2) plot(net.bg, rescale=F, layout=l*1.6) dev.off() ## RStudioGD ## 2 Another popular force-directed algorithm that produces nice results for connected graphs is Kamada Kawai. Like Fruchterman Reingold, it attempts to minimize the energy in a spring system. l &lt;- layout_with_kk(net.bg) plot(net.bg, layout=l) The LGL algorithm is for large connected graphs. Here you can specify a root - the node that will be placed in the middle of the layout. plot(net.bg, layout=layout_with_lgl) By default, igraph uses a layout called layout_nicely which selects an appropriate layout algorithm based on the properties of the graph. Check out all available layouts in igraph: ?igraph::layout_ layouts &lt;- grep(&quot;^layout_&quot;, ls(&quot;package:igraph&quot;), value=TRUE)[-1] Remove layouts that do not apply to our graph. layouts &lt;- layouts[!grepl(&quot;bipartite|merge|norm|sugiyama|tree&quot;, layouts)] par(mfrow=c(3,3), mar=c(1,1,1,1)) for (layout in layouts) { print(layout) l &lt;- do.call(layout, list(net)) plot(net, edge.arrow.mode=0, layout=l, main=layout) } ## [1] &quot;layout_as_star&quot; ## [1] &quot;layout_components&quot; ## [1] &quot;layout_in_circle&quot; ## [1] &quot;layout_nicely&quot; ## [1] &quot;layout_on_grid&quot; ## [1] &quot;layout_on_sphere&quot; ## [1] &quot;layout_randomly&quot; ## [1] &quot;layout_with_dh&quot; ## [1] &quot;layout_with_drl&quot; ## [1] &quot;layout_with_fr&quot; ## [1] &quot;layout_with_gem&quot; ## [1] &quot;layout_with_graphopt&quot; ## [1] &quot;layout_with_kk&quot; ## [1] &quot;layout_with_lgl&quot; ## [1] &quot;layout_with_mds&quot; plot(net) Notice that this network plot is still not too helpful. We can identify the type and size of nodes, but cannot see much about the structure since the links were examining are so dense. One way to approach this is to see if we can sparsify the network. hist(links$weight) mean(links$weight) ## [1] 12.40816 sd(links$weight) ## [1] 9.905635 There are more sophisticated ways to extract the key edges, but for the purposes of this excercise well only keep ones that have weight higher than the mean for the network. We can delete edges using delete_edges(net, edges) cut.off &lt;- mean(links$weight) net.sp &lt;- delete_edges(net, E(net)[weight&lt;cut.off]) plot(net.sp) Another way to think about this is to plot the two tie types (hyperlik &amp; mention) separately: E(net)$width &lt;- 2 plot(net, edge.color=c(&quot;dark red&quot;, &quot;slategrey&quot;)[(E(net)$type==&quot;hyperlink&quot;)+1], vertex.color=&quot;gray40&quot;, layout=layout_in_circle) Another way to delete edges: net.m &lt;- net - E(net)[E(net)$type==&quot;hyperlink&quot;] net.h &lt;- net - E(net)[E(net)$type==&quot;mention&quot;] Plot the two links separately: par(mfrow=c(1,2)) plot(net.h, vertex.color=&quot;orange&quot;, main=&quot;Tie: Hyperlink&quot;) plot(net.m, vertex.color=&quot;lightsteelblue2&quot;, main=&quot;Tie: Mention&quot;) dev.off() ## RStudioGD ## 2 Make sure the nodes stay in place in both plots: par(mfrow=c(1,2),mar=c(1,1,4,1)) l &lt;- layout_with_fr(net) plot(net.h, vertex.color=&quot;orange&quot;, layout=l, main=&quot;Tie: Hyperlink&quot;) plot(net.m, vertex.color=&quot;lightsteelblue2&quot;, layout=l, main=&quot;Tie: Mention&quot;) dev.off() ## RStudioGD ## 2 R and igraph offer interactive plotting capabilities (mostly helpful for small networks) tkid &lt;- tkplot(net) #tkid is the id of the tkplot l &lt;- tkplot.getcoords(tkid) # grab the coordinates from tkplot tk_close(tkid, window.close = T) plot(net, layout=l) A quick reminder that there are other ways to represent a network: Heatmap of the network matrix: netm &lt;- get.adjacency(net, attr=&quot;weight&quot;, sparse=F) colnames(netm) &lt;- V(net)$media rownames(netm) &lt;- V(net)$media palf &lt;- colorRampPalette(c(&quot;gold&quot;, &quot;dark orange&quot;)) heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(20), scale=&quot;none&quot;, margins=c(10,10) ) head(nodes2) ## id media media.type media.name audience.size ## 1 s01 NYT 1 Newspaper 20 ## 2 s02 WaPo 1 Newspaper 25 ## 3 s03 WSJ 1 Newspaper 30 ## 4 s04 USAT 1 Newspaper 32 ## 5 s05 LATimes 1 Newspaper 20 ## 6 s06 CNN 2 TV 56 head(links2) ## U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19 U20 ## s01 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## s02 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 ## s03 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 ## s04 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 ## s05 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 ## s06 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 net2 ## IGRAPH 32a2522 UN-B 30 31 -- ## + attr: type (v/l), name (v/c) ## + edges from 32a2522 (vertex names): ## [1] s01--U01 s01--U02 s01--U03 s02--U04 s02--U05 s02--U20 s03--U06 s03--U07 s03--U08 s03--U09 s04--U09 s04--U10 s04--U11 s05--U11 s05--U12 s05--U13 ## [17] s06--U13 s06--U14 s06--U17 s07--U14 s07--U15 s07--U16 s08--U16 s08--U17 s08--U18 s08--U19 s09--U06 s09--U19 s09--U20 s10--U01 s10--U11 plot(net2) This time we will make nodes look different based on their type. V(net2)$color &lt;- c(&quot;steel blue&quot;, &quot;orange&quot;)[V(net2)$type+1] V(net2)$shape &lt;- c(&quot;square&quot;, &quot;circle&quot;)[V(net2)$type+1] V(net2)$label &lt;- &quot;&quot; V(net2)$label[V(net2)$type==F] &lt;- nodes2$media[V(net2)$type==F] V(net2)$label.cex=.6 V(net2)$label.font=2 plot(net2, vertex.label.color=&quot;white&quot;, vertex.size=(2-V(net2)$type)*8) plot(net2, vertex.label=NA, vertex.size=7, layout=layout_as_bipartite) Using text as nodes: par(mar=c(0,0,0,0)) plot(net2, vertex.shape=&quot;none&quot;, vertex.label=nodes2$media, vertex.label.color=V(net2)$color, vertex.label.font=2, vertex.label.cex=.95, edge.color=&quot;gray70&quot;, edge.width=2) dev.off() ## RStudioGD ## 2 3.7 Homework 1 - part 3 Plot our social network with four different layouts of your choice. Pick an undirected network in NETWORK RRPOSITORY or ICON and plot it with a layout of your choice. "],["introduction-to-r-markdown.html", "4 Introduction to R Markdown 4.1 R Markdown recources 4.2 A simple R Markdown file 4.3 Getting started with equations 4.4 Matrix and equations 4.5 Statistics 4.6 Tables 4.7 Create GIFs 4.8 Support Python and Shell script 4.9 Homework 1 - part 4", " 4 Introduction to R Markdown 4.1 R Markdown recources R Markdown A comprehensive refernce menu by the authors of R Markdown can be found in https://bookdown.org/yihui/rmarkdown-cookbook/. R Markdown cheatsheet https://rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf Latex A comprehensive Latex cheat sheet http://tug.ctan.org/info/latex-refsheet/LaTeX_RefSheet.pdf A simple Latex cheat sheet http://tug.ctan.org/info/undergradmath/undergradmath.pdf. You may try the formulas in this online edutor first http://visualmatheditor.equatheque.net/VisualMathEditor.html before you copy them to R Markdown. 4.2 A simple R Markdown file R Markdown allows you to create documents that serve as a neat record of your analysis. To get RMarkdown working in RStudio, the first thing you need is the rmarkdown package. install.packages(&quot;rmarkdown&quot;) library(rmarkdown) To create a new RMarkdown file .Rmd, select File -&gt; New File -&gt; R Markdown in RStudio, then choose the file type you want to create. For now we will focus on a .html document, which can be easily converted to other file types later. The newly created .Rmd file comes with basic instructions. Write an R code chunk, always start and end the code chunk in the following format. ```{r} x=2 x ``` To display a plot: x=c(-2,1,4,6) y=c(2,1,-3,5) plot(x,y,type = &quot;l&quot;) To create sections, start with #, follow by a space then your section title. To see the content with sections titles, you need to add number_sections: yes to the header Then click knit to HTML under the Rmd file tab. 4.3 Getting started with equations Subscripts and Superscripts: $X_i$ $x^i$ \\[X_i\\] \\[X^i\\] Multiple subscripts and Superscripts: $X_{i,j,k}$ $X^{i,j,k}$ $X^{2k}_{i,j}$ \\[X_{i,j,k}\\] \\[X^{i,j,k}\\] \\[X^{2k}_{i,j}\\] Square Roots: $\\sqrt{b^2 - 4ac}$ \\[\\sqrt{b^2 - 4ac}\\] We can write fractions: $\\frac{2}{3}$ \\[\\frac{2}{3}\\] Summation: $\\sum_{i=1}^{n} X^3_i$ \\[\\sum_{i=1}^{n} X^3_i\\] Integration and trig functions: $\\int_0^{2\\pi} \\sin x~dx$ \\[\\int_0^{2\\pi} \\sin x~dx\\] Self-Sizing Parentheses: $\\sum_{i=1}^{n}\\left( \\frac{X_i}{Y_i} \\right)$ \\[\\sum_{i=1}^{n}\\left( \\frac{X_i}{Y_i} \\right)\\] And, $\\hat{\\lambda}=1.02$ \\[\\hat{\\lambda}=1.02\\] $\\alpha, \\beta, \\gamma, \\Gamma$ \\[\\alpha, \\beta, \\gamma, \\Gamma\\] $a \\pm b$ \\[a \\pm b\\] $x \\ge 15$ \\[x \\ge 15\\] $a_i \\ge 0~~~\\forall i$ \\[a_i \\ge 0~~~\\forall i\\] 4.4 Matrix and equations $$A_{m,n} = \\begin{pmatrix} a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1,n} \\\\ a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2,n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m,1} &amp; a_{m,2} &amp; \\cdots &amp; a_{m,n} \\end{pmatrix}$$ \\[A_{m,n} = \\begin{pmatrix} a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1,n} \\\\ a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2,n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m,1} &amp; a_{m,2} &amp; \\cdots &amp; a_{m,n} \\end{pmatrix}\\] Aligning Equations: For example, suppose you are proving that the sum of deviation scores is always equal to zero in any list of numbers. You can align the equations like this. Notice how I define new symbols and to make things much simpler! Notice the key role that the alignment tab character &amp; plays in telling LaTeX where to align the equations. Also notice the double-backslash newline character at the end of every line of the equation except the last \\[ %% Comment -- define some macros \\def\\Xbar{\\overline{X}_\\bullet} \\def\\sumn{\\sum_{i=1}^{n}} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{align} \\sumn \\left(X_i - \\Xbar\\right) &amp;= \\sumn X_i - \\sumn \\Xbar \\\\ &amp;= \\sumn X_i - n \\Xbar \\\\ &amp;= \\sumn X_i - \\sumn X_i \\\\ &amp;= 0 \\end{align} \\] $ \\begin{align} 3+x &amp;=4 &amp;&amp; \\text{(Solve for} x \\text{.)}\\\\ x &amp;=4-3 &amp;&amp; \\text{(Subtract 3 from both sides.)}\\\\ x &amp;=1 &amp;&amp; \\text{(Yielding the solution.)} \\end{align} $ \\[ \\begin{align} 3+x &amp;=4 &amp;&amp; \\text{(Solve for} x \\text{.)}\\\\ x &amp;=4-3 &amp;&amp; \\text{(Subtract 3 from both sides.)}\\\\ x &amp;=1 &amp;&amp; \\text{(Yielding the solution.)} \\end{align} \\] 4.5 Statistics The binomial probability: $f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y}$ \\[f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y}\\] To calculate the mean of observations of variable , you can use: $\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n}x_{i}$ \\[\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n}x_{i}\\] Lets do the same with the equation for variance $\\sigma^{2} = \\frac{\\sum_{i=1}^{n} \\left(x_{i} - \\bar{x}\\right)^{2}}{n-1}$ \\[\\sigma^{2} = \\frac{\\sum_{i=1}^{n} \\left(x_{i} - \\bar{x}\\right)^{2}} {n-1}\\] Next, its good to look at the equation for covariance to see how it is just a generalization of variance to two variables. $cov_{x,y} = \\frac{\\sum\\limits_{i=1}^{n}{(x_i-\\overline{x}) \\cdot (y_i-\\overline{y})} }{n-1}$ \\[cov_{x,y} = \\frac{\\sum\\limits_{i=1}^{n}{(x_i-\\overline{x}) \\cdot (y_i-\\overline{y})} }{n-1}\\] The standard deviation. $\\sigma = \\sqrt{\\frac{\\sum\\limits_{i=1}^{n} \\left(x_{i} - \\bar{x}\\right)^{2}} {n-1}}$ 4.6 Tables First creat a table in dataframe format. A &lt;- c(&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;) B &lt;- c(5, 3, 15, 6) C &lt;- c(23,21,20,32) df &lt;- data.frame(A, B,C) Print the contents of a data frame: df ## A B C ## 1 a 5 23 ## 2 a 3 21 ## 3 b 15 20 ## 4 b 6 32 Display the table by kable() in the knitr package. The first argument tells kable to make a table out of the object dataframe and that numbers should have two significant figures. You need to load the knitr package first. library(knitr) kable(df, digits = 2) A B C a 5 23 a 3 21 b 15 20 b 6 32 Or you can use pander() in the pander package. Let the 3rd column to appear in italics: library(pander) emphasize.italics.cols(3) # Make the 3rd column italics pander(df) # Create the table A B C a 5 23 a 3 21 b 15 20 b 6 32 x=2 y=3 x+y 4.7 Create GIFs gifski is an R package that generate gif figures, you need to install it first, and you need to load it before you use it, library(gifski)#. for (i in 1:2) { pie(c(i %% 2, 6), col = c(&#39;red&#39;, &#39;yellow&#39;), labels = NA) # x %% y indicates x mod y } x=seq(-5,5,length=100) for (i in 1:5) { plot(x,i*x^2+2*x,type = &quot;l&quot;,xlim=c(-5,5),ylim=c(0,60)) } 4.8 Support Python and Shell script You need to first install Python in your machine. Running a piece of Python code may slows down the Knitting process. print(&quot;Hello Python!&quot;) ## Hello Python! echo $PATH ## /usr/local/bin:/usr/bin:/bin:/opt/bin:/c/Windows/System32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0/:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl 4.9 Homework 1 - part 4 Put all your homework 1, 2, 3 in one markdown file. There should be 3 sections and each section is titled by Homework i, i = 1,2,3. Generate a content quick link at the begining. Submit the Rmd file and the generated pdf file. "]]
